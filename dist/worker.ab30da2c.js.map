{"version":3,"sources":["chess.js","turochamp/turochamp.js","worker.js"],"names":["Chess","fen","BLACK","WHITE","EMPTY","PAWN","KNIGHT","BISHOP","ROOK","QUEEN","KING","SYMBOLS","DEFAULT_POSITION","POSSIBLE_RESULTS","PAWN_OFFSETS","b","w","PIECE_OFFSETS","n","r","q","k","ATTACKS","RAYS","SHIFTS","p","FLAGS","NORMAL","CAPTURE","BIG_PAWN","EP_CAPTURE","PROMOTION","KSIDE_CASTLE","QSIDE_CASTLE","BITS","RANK_1","RANK_2","RANK_3","RANK_4","RANK_5","RANK_6","RANK_7","RANK_8","SQUARES","a8","b8","c8","d8","e8","f8","g8","h8","a7","b7","c7","d7","e7","f7","g7","h7","a6","b6","c6","d6","e6","f6","g6","h6","a5","b5","c5","d5","e5","f5","g5","h5","a4","b4","c4","d4","e4","f4","g4","h4","a3","b3","c3","d3","e3","f3","g3","h3","a2","b2","c2","d2","e2","f2","g2","h2","a1","b1","c1","d1","e1","f1","g1","h1","ROOKS","square","flag","board","Array","kings","turn","castling","ep_square","half_moves","move_number","history","header","comments","load","clear","keep_headers","update_setup","generate_fen","prune_comments","reversed_history","current_comments","copy_comment","length","push","undo_move","make_move","pop","reset","tokens","split","position","validate_fen","valid","i","piece","charAt","is_digit","parseInt","color","put","type","toLowerCase","algebraic","indexOf","errors","error_number","error","isNaN","test","rows","sum_fields","previous_was_number","empty","toUpperCase","cflags","epflags","join","set_header","args","get","sq","remove","build_move","from","to","flags","promotion","move","captured","generate_moves","options","add_move","moves","rank","pieces","len","us","them","swap_color","second_rank","first_sq","last_sq","single_square","legal","j","offset","castling_from","castling_to","attacked","legal_moves","king_attacked","move_to_san","sloppy","output","disambiguator","get_disambiguator","in_check","in_checkmate","stripped_san","replace","difference","index","blocked","in_stalemate","insufficient_material","bishops","num_pieces","sq_color","sum","in_threefold_repetition","positions","repetition","slice","old","ambiguities","same_rank","same_file","ambig_from","ambig_to","ambig_piece","file","ascii","s","symbol","move_from_san","clean_move","matches","match","f","substring","c","make_pretty","ugly_move","clone","san","obj","dupe","property","trim","str","perft","depth","nodes","child_nodes","keys","ugly_moves","verbose","in_draw","game_over","row","pgn","newline","newline_char","max_width","result","header_exists","append_comment","move_string","comment","delimiter","Result","strip","wrap_comment","width","token","current_width","includes","load_pgn","mask","has_keys","object","key","parse_pgn_header","header_obj","headers","RegExp","value","header_regex","header_string","exec","to_hex","string","map","charCodeAt","toString","encodeURIComponent","from_hex","decodeURIComponent","encode_comment","decode_comment","startsWith","endsWith","ms","bracket","semicolon","undefined","rav_regex","half_move","arguments","setTurn","t","move_obj","pretty_move","undo","square_color","sq_0x88","move_history","get_comment","set_comment","delete_comment","get_comments","Object","delete_comments","exports","define","DEPTH","MIN","MAX","Turochamp","game","val","_getPositionalValue","_getMaterialValue","maxValue","maxValueMove","_alphaBetaSearch","_getPositionEvaluation","_countKingSafetyScore","_isCheckMateThreat","currDepth","alpha","beta","isMax","mval","_getMaterialValueSub","considerableMoves","best","m","Math","max","matval","min","criteria1","_countRootNumberOfMoves","criteria2","_countDefendersOfPiece","criteria3","_countKingMovesNotCastle","criteria4","_countKingExposedScore","criteria6","_countPawnScore","_isBlackInCheck","sqrt","_nextChar","d","_countSquareDefenders","_squaresOfPiece","removedKing","err","console","log","movePlayed","_isCastlingPossible","isCheck","fenParts","ca","squares","defenders","countPawn","removedPiece","e","pieceType","filter","B","_getMaterialValueForColor","W","String","fromCharCode","onmessage","data","turochamp","postMessage","JSON","stringify","findNextMove"],"mappings":"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","file":"worker.ab30da2c.js","sourceRoot":"..","sourcesContent":["/*\r\n * Copyright (c) 2020, Jeff Hlywa (jhlywa@gmail.com)\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n *----------------------------------------------------------------------------*/\r\n\r\nvar Chess = function(fen) {\r\n    var BLACK = 'b'\r\n    var WHITE = 'w'\r\n  \r\n    var EMPTY = -1\r\n  \r\n    var PAWN = 'p'\r\n    var KNIGHT = 'n'\r\n    var BISHOP = 'b'\r\n    var ROOK = 'r'\r\n    var QUEEN = 'q'\r\n    var KING = 'k'\r\n  \r\n    var SYMBOLS = 'pnbrqkPNBRQK'\r\n  \r\n    var DEFAULT_POSITION =\r\n      'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1'\r\n  \r\n    var POSSIBLE_RESULTS = ['1-0', '0-1', '1/2-1/2', '*']\r\n  \r\n    var PAWN_OFFSETS = {\r\n      b: [16, 32, 17, 15],\r\n      w: [-16, -32, -17, -15]\r\n    }\r\n  \r\n    var PIECE_OFFSETS = {\r\n      n: [-18, -33, -31, -14, 18, 33, 31, 14],\r\n      b: [-17, -15, 17, 15],\r\n      r: [-16, 1, 16, -1],\r\n      q: [-17, -16, -15, 1, 17, 16, 15, -1],\r\n      k: [-17, -16, -15, 1, 17, 16, 15, -1]\r\n    }\r\n  \r\n    // prettier-ignore\r\n    var ATTACKS = [\r\n      20, 0, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0, 0,20, 0,\r\n       0,20, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0,20, 0, 0,\r\n       0, 0,20, 0, 0, 0, 0, 24,  0, 0, 0, 0,20, 0, 0, 0,\r\n       0, 0, 0,20, 0, 0, 0, 24,  0, 0, 0,20, 0, 0, 0, 0,\r\n       0, 0, 0, 0,20, 0, 0, 24,  0, 0,20, 0, 0, 0, 0, 0,\r\n       0, 0, 0, 0, 0,20, 2, 24,  2,20, 0, 0, 0, 0, 0, 0,\r\n       0, 0, 0, 0, 0, 2,53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\r\n      24,24,24,24,24,24,56,  0, 56,24,24,24,24,24,24, 0,\r\n       0, 0, 0, 0, 0, 2,53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\r\n       0, 0, 0, 0, 0,20, 2, 24,  2,20, 0, 0, 0, 0, 0, 0,\r\n       0, 0, 0, 0,20, 0, 0, 24,  0, 0,20, 0, 0, 0, 0, 0,\r\n       0, 0, 0,20, 0, 0, 0, 24,  0, 0, 0,20, 0, 0, 0, 0,\r\n       0, 0,20, 0, 0, 0, 0, 24,  0, 0, 0, 0,20, 0, 0, 0,\r\n       0,20, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0,20, 0, 0,\r\n      20, 0, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0, 0,20\r\n    ];\r\n  \r\n    // prettier-ignore\r\n    var RAYS = [\r\n       17,  0,  0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0,  0, 15, 0,\r\n        0, 17,  0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0, 15,  0, 0,\r\n        0,  0, 17,  0,  0,  0,  0, 16,  0,  0,  0,  0, 15,  0,  0, 0,\r\n        0,  0,  0, 17,  0,  0,  0, 16,  0,  0,  0, 15,  0,  0,  0, 0,\r\n        0,  0,  0,  0, 17,  0,  0, 16,  0,  0, 15,  0,  0,  0,  0, 0,\r\n        0,  0,  0,  0,  0, 17,  0, 16,  0, 15,  0,  0,  0,  0,  0, 0,\r\n        0,  0,  0,  0,  0,  0, 17, 16, 15,  0,  0,  0,  0,  0,  0, 0,\r\n        1,  1,  1,  1,  1,  1,  1,  0, -1, -1,  -1,-1, -1, -1, -1, 0,\r\n        0,  0,  0,  0,  0,  0,-15,-16,-17,  0,  0,  0,  0,  0,  0, 0,\r\n        0,  0,  0,  0,  0,-15,  0,-16,  0,-17,  0,  0,  0,  0,  0, 0,\r\n        0,  0,  0,  0,-15,  0,  0,-16,  0,  0,-17,  0,  0,  0,  0, 0,\r\n        0,  0,  0,-15,  0,  0,  0,-16,  0,  0,  0,-17,  0,  0,  0, 0,\r\n        0,  0,-15,  0,  0,  0,  0,-16,  0,  0,  0,  0,-17,  0,  0, 0,\r\n        0,-15,  0,  0,  0,  0,  0,-16,  0,  0,  0,  0,  0,-17,  0, 0,\r\n      -15,  0,  0,  0,  0,  0,  0,-16,  0,  0,  0,  0,  0,  0,-17\r\n    ];\r\n  \r\n    var SHIFTS = { p: 0, n: 1, b: 2, r: 3, q: 4, k: 5 }\r\n  \r\n    var FLAGS = {\r\n      NORMAL: 'n',\r\n      CAPTURE: 'c',\r\n      BIG_PAWN: 'b',\r\n      EP_CAPTURE: 'e',\r\n      PROMOTION: 'p',\r\n      KSIDE_CASTLE: 'k',\r\n      QSIDE_CASTLE: 'q'\r\n    }\r\n  \r\n    var BITS = {\r\n      NORMAL: 1,\r\n      CAPTURE: 2,\r\n      BIG_PAWN: 4,\r\n      EP_CAPTURE: 8,\r\n      PROMOTION: 16,\r\n      KSIDE_CASTLE: 32,\r\n      QSIDE_CASTLE: 64\r\n    }\r\n  \r\n    var RANK_1 = 7\r\n    var RANK_2 = 6\r\n    var RANK_3 = 5\r\n    var RANK_4 = 4\r\n    var RANK_5 = 3\r\n    var RANK_6 = 2\r\n    var RANK_7 = 1\r\n    var RANK_8 = 0\r\n  \r\n    // prettier-ignore\r\n    var SQUARES = {\r\n      a8:   0, b8:   1, c8:   2, d8:   3, e8:   4, f8:   5, g8:   6, h8:   7,\r\n      a7:  16, b7:  17, c7:  18, d7:  19, e7:  20, f7:  21, g7:  22, h7:  23,\r\n      a6:  32, b6:  33, c6:  34, d6:  35, e6:  36, f6:  37, g6:  38, h6:  39,\r\n      a5:  48, b5:  49, c5:  50, d5:  51, e5:  52, f5:  53, g5:  54, h5:  55,\r\n      a4:  64, b4:  65, c4:  66, d4:  67, e4:  68, f4:  69, g4:  70, h4:  71,\r\n      a3:  80, b3:  81, c3:  82, d3:  83, e3:  84, f3:  85, g3:  86, h3:  87,\r\n      a2:  96, b2:  97, c2:  98, d2:  99, e2: 100, f2: 101, g2: 102, h2: 103,\r\n      a1: 112, b1: 113, c1: 114, d1: 115, e1: 116, f1: 117, g1: 118, h1: 119\r\n    };\r\n  \r\n    var ROOKS = {\r\n      w: [\r\n        { square: SQUARES.a1, flag: BITS.QSIDE_CASTLE },\r\n        { square: SQUARES.h1, flag: BITS.KSIDE_CASTLE }\r\n      ],\r\n      b: [\r\n        { square: SQUARES.a8, flag: BITS.QSIDE_CASTLE },\r\n        { square: SQUARES.h8, flag: BITS.KSIDE_CASTLE }\r\n      ]\r\n    }\r\n  \r\n    var board = new Array(128)\r\n    var kings = { w: EMPTY, b: EMPTY }\r\n    var turn = WHITE\r\n    var castling = { w: 0, b: 0 }\r\n    var ep_square = EMPTY\r\n    var half_moves = 0\r\n    var move_number = 1\r\n    var history = []\r\n    var header = {}\r\n    var comments = {}\r\n  \r\n    /* if the user passes in a fen string, load it, else default to\r\n     * starting position\r\n     */\r\n    if (typeof fen === 'undefined') {\r\n      load(DEFAULT_POSITION)\r\n    } else {\r\n      load(fen)\r\n    }\r\n  \r\n    function clear(keep_headers) {\r\n      if (typeof keep_headers === 'undefined') {\r\n        keep_headers = false\r\n      }\r\n  \r\n      board = new Array(128)\r\n      kings = { w: EMPTY, b: EMPTY }\r\n      turn = WHITE\r\n      castling = { w: 0, b: 0 }\r\n      ep_square = EMPTY\r\n      half_moves = 0\r\n      move_number = 1\r\n      history = []\r\n      if (!keep_headers) header = {}\r\n      comments = {}\r\n      update_setup(generate_fen())\r\n    }\r\n  \r\n    function prune_comments() {\r\n      var reversed_history = [];\r\n      var current_comments = {};\r\n      var copy_comment = function(fen) {\r\n        if (fen in comments) {\r\n          current_comments[fen] = comments[fen];\r\n        }\r\n      };\r\n      while (history.length > 0) {\r\n        reversed_history.push(undo_move());\r\n      }\r\n      copy_comment(generate_fen());\r\n      while (reversed_history.length > 0) {\r\n        make_move(reversed_history.pop());\r\n        copy_comment(generate_fen());\r\n      }\r\n      comments = current_comments;\r\n    }\r\n  \r\n    function reset() {\r\n      load(DEFAULT_POSITION)\r\n    }\r\n  \r\n    function load(fen, keep_headers) {\r\n      if (typeof keep_headers === 'undefined') {\r\n        keep_headers = false\r\n      }\r\n  \r\n      var tokens = fen.split(/\\s+/)\r\n      var position = tokens[0]\r\n      var square = 0\r\n  \r\n      if (!validate_fen(fen).valid) {\r\n        return false\r\n      }\r\n  \r\n      clear(keep_headers)\r\n  \r\n      for (var i = 0; i < position.length; i++) {\r\n        var piece = position.charAt(i)\r\n  \r\n        if (piece === '/') {\r\n          square += 8\r\n        } else if (is_digit(piece)) {\r\n          square += parseInt(piece, 10)\r\n        } else {\r\n          var color = piece < 'a' ? WHITE : BLACK\r\n          put({ type: piece.toLowerCase(), color: color }, algebraic(square))\r\n          square++\r\n        }\r\n      }\r\n  \r\n      turn = tokens[1]\r\n  \r\n      if (tokens[2].indexOf('K') > -1) {\r\n        castling.w |= BITS.KSIDE_CASTLE\r\n      }\r\n      if (tokens[2].indexOf('Q') > -1) {\r\n        castling.w |= BITS.QSIDE_CASTLE\r\n      }\r\n      if (tokens[2].indexOf('k') > -1) {\r\n        castling.b |= BITS.KSIDE_CASTLE\r\n      }\r\n      if (tokens[2].indexOf('q') > -1) {\r\n        castling.b |= BITS.QSIDE_CASTLE\r\n      }\r\n  \r\n      ep_square = tokens[3] === '-' ? EMPTY : SQUARES[tokens[3]]\r\n      half_moves = parseInt(tokens[4], 10)\r\n      move_number = parseInt(tokens[5], 10)\r\n  \r\n      update_setup(generate_fen())\r\n  \r\n      return true\r\n    }\r\n  \r\n    /* TODO: this function is pretty much crap - it validates structure but\r\n     * completely ignores content (e.g. doesn't verify that each side has a king)\r\n     * ... we should rewrite this, and ditch the silly error_number field while\r\n     * we're at it\r\n     */\r\n    function validate_fen(fen) {\r\n      var errors = {\r\n        0: 'No errors.',\r\n        1: 'FEN string must contain six space-delimited fields.',\r\n        2: '6th field (move number) must be a positive integer.',\r\n        3: '5th field (half move counter) must be a non-negative integer.',\r\n        4: '4th field (en-passant square) is invalid.',\r\n        5: '3rd field (castling availability) is invalid.',\r\n        6: '2nd field (side to move) is invalid.',\r\n        7: \"1st field (piece positions) does not contain 8 '/'-delimited rows.\",\r\n        8: '1st field (piece positions) is invalid [consecutive numbers].',\r\n        9: '1st field (piece positions) is invalid [invalid piece].',\r\n        10: '1st field (piece positions) is invalid [row too large].',\r\n        11: 'Illegal en-passant square'\r\n      }\r\n  \r\n      /* 1st criterion: 6 space-seperated fields? */\r\n      var tokens = fen.split(/\\s+/)\r\n      if (tokens.length !== 6) {\r\n        return { valid: false, error_number: 1, error: errors[1] }\r\n      }\r\n  \r\n      /* 2nd criterion: move number field is a integer value > 0? */\r\n      if (isNaN(tokens[5]) || parseInt(tokens[5], 10) <= 0) {\r\n        return { valid: false, error_number: 2, error: errors[2] }\r\n      }\r\n  \r\n      /* 3rd criterion: half move counter is an integer >= 0? */\r\n      if (isNaN(tokens[4]) || parseInt(tokens[4], 10) < 0) {\r\n        return { valid: false, error_number: 3, error: errors[3] }\r\n      }\r\n  \r\n      /* 4th criterion: 4th field is a valid e.p.-string? */\r\n      if (!/^(-|[abcdefgh][36])$/.test(tokens[3])) {\r\n        return { valid: false, error_number: 4, error: errors[4] }\r\n      }\r\n  \r\n      /* 5th criterion: 3th field is a valid castle-string? */\r\n      if (!/^(KQ?k?q?|Qk?q?|kq?|q|-)$/.test(tokens[2])) {\r\n        return { valid: false, error_number: 5, error: errors[5] }\r\n      }\r\n  \r\n      /* 6th criterion: 2nd field is \"w\" (white) or \"b\" (black)? */\r\n      if (!/^(w|b)$/.test(tokens[1])) {\r\n        return { valid: false, error_number: 6, error: errors[6] }\r\n      }\r\n  \r\n      /* 7th criterion: 1st field contains 8 rows? */\r\n      var rows = tokens[0].split('/')\r\n      if (rows.length !== 8) {\r\n        return { valid: false, error_number: 7, error: errors[7] }\r\n      }\r\n  \r\n      /* 8th criterion: every row is valid? */\r\n      for (var i = 0; i < rows.length; i++) {\r\n        /* check for right sum of fields AND not two numbers in succession */\r\n        var sum_fields = 0\r\n        var previous_was_number = false\r\n  \r\n        for (var k = 0; k < rows[i].length; k++) {\r\n          if (!isNaN(rows[i][k])) {\r\n            if (previous_was_number) {\r\n              return { valid: false, error_number: 8, error: errors[8] }\r\n            }\r\n            sum_fields += parseInt(rows[i][k], 10)\r\n            previous_was_number = true\r\n          } else {\r\n            if (!/^[prnbqkPRNBQK]$/.test(rows[i][k])) {\r\n              return { valid: false, error_number: 9, error: errors[9] }\r\n            }\r\n            sum_fields += 1\r\n            previous_was_number = false\r\n          }\r\n        }\r\n        if (sum_fields !== 8) {\r\n          return { valid: false, error_number: 10, error: errors[10] }\r\n        }\r\n      }\r\n  \r\n      if (\r\n        (tokens[3][1] == '3' && tokens[1] == 'w') ||\r\n        (tokens[3][1] == '6' && tokens[1] == 'b')\r\n      ) {\r\n        return { valid: false, error_number: 11, error: errors[11] }\r\n      }\r\n  \r\n      /* everything's okay! */\r\n      return { valid: true, error_number: 0, error: errors[0] }\r\n    }\r\n  \r\n    function generate_fen() {\r\n      var empty = 0\r\n      var fen = ''\r\n  \r\n      for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\r\n        if (board[i] == null) {\r\n          empty++\r\n        } else {\r\n          if (empty > 0) {\r\n            fen += empty\r\n            empty = 0\r\n          }\r\n          var color = board[i].color\r\n          var piece = board[i].type\r\n  \r\n          fen += color === WHITE ? piece.toUpperCase() : piece.toLowerCase()\r\n        }\r\n  \r\n        if ((i + 1) & 0x88) {\r\n          if (empty > 0) {\r\n            fen += empty\r\n          }\r\n  \r\n          if (i !== SQUARES.h1) {\r\n            fen += '/'\r\n          }\r\n  \r\n          empty = 0\r\n          i += 8\r\n        }\r\n      }\r\n  \r\n      var cflags = ''\r\n      if (castling[WHITE] & BITS.KSIDE_CASTLE) {\r\n        cflags += 'K'\r\n      }\r\n      if (castling[WHITE] & BITS.QSIDE_CASTLE) {\r\n        cflags += 'Q'\r\n      }\r\n      if (castling[BLACK] & BITS.KSIDE_CASTLE) {\r\n        cflags += 'k'\r\n      }\r\n      if (castling[BLACK] & BITS.QSIDE_CASTLE) {\r\n        cflags += 'q'\r\n      }\r\n  \r\n      /* do we have an empty castling flag? */\r\n      cflags = cflags || '-'\r\n      var epflags = ep_square === EMPTY ? '-' : algebraic(ep_square)\r\n  \r\n      return [fen, turn, cflags, epflags, half_moves, move_number].join(' ')\r\n    }\r\n  \r\n    function set_header(args) {\r\n      for (var i = 0; i < args.length; i += 2) {\r\n        if (typeof args[i] === 'string' && typeof args[i + 1] === 'string') {\r\n          header[args[i]] = args[i + 1]\r\n        }\r\n      }\r\n      return header\r\n    }\r\n  \r\n    /* called when the initial board setup is changed with put() or remove().\r\n     * modifies the SetUp and FEN properties of the header object.  if the FEN is\r\n     * equal to the default position, the SetUp and FEN are deleted\r\n     * the setup is only updated if history.length is zero, ie moves haven't been\r\n     * made.\r\n     */\r\n    function update_setup(fen) {\r\n      if (history.length > 0) return\r\n  \r\n      if (fen !== DEFAULT_POSITION) {\r\n        header['SetUp'] = '1'\r\n        header['FEN'] = fen\r\n      } else {\r\n        delete header['SetUp']\r\n        delete header['FEN']\r\n      }\r\n    }\r\n  \r\n    function get(square) {\r\n      var piece = board[SQUARES[square]]\r\n      return piece ? { type: piece.type, color: piece.color } : null\r\n    }\r\n  \r\n    function put(piece, square) {\r\n      /* check for valid piece object */\r\n      if (!('type' in piece && 'color' in piece)) {\r\n        return false\r\n      }\r\n  \r\n      /* check for piece */\r\n      if (SYMBOLS.indexOf(piece.type.toLowerCase()) === -1) {\r\n        return false\r\n      }\r\n  \r\n      /* check for valid square */\r\n      if (!(square in SQUARES)) {\r\n        return false\r\n      }\r\n  \r\n      var sq = SQUARES[square]\r\n  \r\n      /* don't let the user place more than one king */\r\n      if (\r\n        piece.type == KING &&\r\n        !(kings[piece.color] == EMPTY || kings[piece.color] == sq)\r\n      ) {\r\n        return false\r\n      }\r\n  \r\n      board[sq] = { type: piece.type, color: piece.color }\r\n      if (piece.type === KING) {\r\n        kings[piece.color] = sq\r\n      }\r\n  \r\n      update_setup(generate_fen())\r\n  \r\n      return true\r\n    }\r\n  \r\n    function remove(square) {\r\n      var piece = get(square)\r\n      board[SQUARES[square]] = null\r\n      if (piece && piece.type === KING) {\r\n        kings[piece.color] = EMPTY\r\n      }\r\n  \r\n      update_setup(generate_fen())\r\n  \r\n      return piece\r\n    }\r\n  \r\n    function build_move(board, from, to, flags, promotion) {\r\n      var move = {\r\n        color: turn,\r\n        from: from,\r\n        to: to,\r\n        flags: flags,\r\n        piece: board[from].type\r\n      }\r\n  \r\n      if (promotion) {\r\n        move.flags |= BITS.PROMOTION\r\n        move.promotion = promotion\r\n      }\r\n  \r\n      if (board[to]) {\r\n        move.captured = board[to].type\r\n      } else if (flags & BITS.EP_CAPTURE) {\r\n        move.captured = PAWN\r\n      }\r\n      return move\r\n    }\r\n  \r\n    function generate_moves(options) {\r\n      function add_move(board, moves, from, to, flags) {\r\n        /* if pawn promotion */\r\n        if (\r\n          typeof board[from] !== \"undefined\" &&\r\n          board[from].type === PAWN &&\r\n          (rank(to) === RANK_8 || rank(to) === RANK_1)\r\n        ) {\r\n          var pieces = [QUEEN, ROOK, BISHOP, KNIGHT]\r\n          for (var i = 0, len = pieces.length; i < len; i++) {\r\n            moves.push(build_move(board, from, to, flags, pieces[i]))\r\n          }\r\n        } else {\r\n          moves.push(build_move(board, from, to, flags))\r\n        }\r\n      }\r\n  \r\n      var moves = []\r\n      var us = turn\r\n      var them = swap_color(us)\r\n      var second_rank = { b: RANK_7, w: RANK_2 }\r\n  \r\n      var first_sq = SQUARES.a8\r\n      var last_sq = SQUARES.h1\r\n      var single_square = false\r\n  \r\n      /* do we want legal moves? */\r\n      var legal =\r\n        typeof options !== 'undefined' && 'legal' in options\r\n          ? options.legal\r\n          : true\r\n  \r\n      /* are we generating moves for a single square? */\r\n      if (typeof options !== 'undefined' && 'square' in options) {\r\n        if (options.square in SQUARES) {\r\n          first_sq = last_sq = SQUARES[options.square]\r\n          single_square = true\r\n        } else {\r\n          /* invalid square */\r\n          return []\r\n        }\r\n      }\r\n  \r\n      for (var i = first_sq; i <= last_sq; i++) {\r\n        /* did we run off the end of the board */\r\n        if (i & 0x88) {\r\n          i += 7\r\n          continue\r\n        }\r\n  \r\n        var piece = board[i]\r\n        if (piece == null || piece.color !== us) {\r\n          continue\r\n        }\r\n  \r\n        if (piece.type === PAWN) {\r\n          /* single square, non-capturing */\r\n          var square = i + PAWN_OFFSETS[us][0]\r\n          if (board[square] == null) {\r\n            add_move(board, moves, i, square, BITS.NORMAL)\r\n  \r\n            /* double square */\r\n            var square = i + PAWN_OFFSETS[us][1]\r\n            if (second_rank[us] === rank(i) && board[square] == null) {\r\n              add_move(board, moves, i, square, BITS.BIG_PAWN)\r\n            }\r\n          }\r\n  \r\n          /* pawn captures */\r\n          for (j = 2; j < 4; j++) {\r\n            var square = i + PAWN_OFFSETS[us][j]\r\n            if (square & 0x88) continue\r\n  \r\n            if (board[square] != null && board[square].color === them) {\r\n              add_move(board, moves, i, square, BITS.CAPTURE)\r\n            } else if (square === ep_square) {\r\n              add_move(board, moves, i, ep_square, BITS.EP_CAPTURE)\r\n            }\r\n          }\r\n        } else {\r\n          for (var j = 0, len = PIECE_OFFSETS[piece.type].length; j < len; j++) {\r\n            var offset = PIECE_OFFSETS[piece.type][j]\r\n            var square = i\r\n  \r\n            while (true) {\r\n              square += offset\r\n              if (square & 0x88) break\r\n  \r\n              if (board[square] == null) {\r\n                add_move(board, moves, i, square, BITS.NORMAL)\r\n              } else {\r\n                if (board[square].color === us) break\r\n                add_move(board, moves, i, square, BITS.CAPTURE)\r\n                break\r\n              }\r\n  \r\n              /* break, if knight or king */\r\n              if (piece.type === 'n' || piece.type === 'k') break\r\n            }\r\n          }\r\n        }\r\n      }\r\n  \r\n      /* check for castling if: a) we're generating all moves, or b) we're doing\r\n       * single square move generation on the king's square\r\n       */\r\n      if (!single_square || last_sq === kings[us]) {\r\n        /* king-side castling */\r\n        if (castling[us] & BITS.KSIDE_CASTLE) {\r\n          var castling_from = kings[us]\r\n          var castling_to = castling_from + 2\r\n  \r\n          if (\r\n            board[castling_from + 1] == null &&\r\n            board[castling_to] == null &&\r\n            !attacked(them, kings[us]) &&\r\n            !attacked(them, castling_from + 1) &&\r\n            !attacked(them, castling_to)\r\n          ) {\r\n            add_move(board, moves, kings[us], castling_to, BITS.KSIDE_CASTLE)\r\n          }\r\n        }\r\n  \r\n        /* queen-side castling */\r\n        if (castling[us] & BITS.QSIDE_CASTLE) {\r\n          var castling_from = kings[us]\r\n          var castling_to = castling_from - 2\r\n          \r\n          if (\r\n            castling_from != -1 &&\r\n            board[castling_from - 1] == null &&\r\n            board[castling_from - 2] == null &&\r\n            board[castling_from - 3] == null &&\r\n            !attacked(them, kings[us]) &&\r\n            !attacked(them, castling_from - 1) &&\r\n            !attacked(them, castling_to)\r\n          ) {\r\n            add_move(board, moves, kings[us], castling_to, BITS.QSIDE_CASTLE)\r\n          }\r\n        }\r\n      }\r\n  \r\n      /* return all pseudo-legal moves (this includes moves that allow the king\r\n       * to be captured)\r\n       */\r\n      if (!legal) {\r\n        return moves\r\n      }\r\n  \r\n      /* filter out illegal moves */\r\n      var legal_moves = []\r\n      for (var i = 0, len = moves.length; i < len; i++) {\r\n        make_move(moves[i])\r\n        if (!king_attacked(us)) {\r\n          legal_moves.push(moves[i])\r\n        }\r\n        undo_move()\r\n      }\r\n  \r\n      return legal_moves\r\n    }\r\n  \r\n    /* convert a move from 0x88 coordinates to Standard Algebraic Notation\r\n     * (SAN)\r\n     *\r\n     * @param {boolean} sloppy Use the sloppy SAN generator to work around over\r\n     * disambiguation bugs in Fritz and Chessbase.  See below:\r\n     *\r\n     * r1bqkbnr/ppp2ppp/2n5/1B1pP3/4P3/8/PPPP2PP/RNBQK1NR b KQkq - 2 4\r\n     * 4. ... Nge7 is overly disambiguated because the knight on c6 is pinned\r\n     * 4. ... Ne7 is technically the valid SAN\r\n     */\r\n    function move_to_san(move, sloppy) {\r\n      var output = ''\r\n  \r\n      if (move.flags & BITS.KSIDE_CASTLE) {\r\n        output = 'O-O'\r\n      } else if (move.flags & BITS.QSIDE_CASTLE) {\r\n        output = 'O-O-O'\r\n      } else {\r\n        var disambiguator = get_disambiguator(move, sloppy)\r\n  \r\n        if (move.piece !== PAWN) {\r\n          output += move.piece.toUpperCase() + disambiguator\r\n        }\r\n  \r\n        if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\r\n          if (move.piece === PAWN) {\r\n            output += algebraic(move.from)[0]\r\n          }\r\n          output += 'x'\r\n        }\r\n  \r\n        output += algebraic(move.to)\r\n  \r\n        if (move.flags & BITS.PROMOTION) {\r\n          output += '=' + move.promotion.toUpperCase()\r\n        }\r\n      }\r\n  \r\n      make_move(move)\r\n      if (in_check()) {\r\n        if (in_checkmate()) {\r\n          output += '#'\r\n        } else {\r\n          output += '+'\r\n        }\r\n      }\r\n      undo_move()\r\n  \r\n      return output\r\n    }\r\n  \r\n    // parses all of the decorators out of a SAN string\r\n    function stripped_san(move) {\r\n      return move.replace(/=/, '').replace(/[+#]?[?!]*$/, '')\r\n    }\r\n  \r\n    function attacked(color, square) {\r\n      for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\r\n        /* did we run off the end of the board */\r\n        if (i & 0x88) {\r\n          i += 7\r\n          continue\r\n        }\r\n  \r\n        /* if empty square or wrong color */\r\n        if (board[i] == null || board[i].color !== color) continue\r\n  \r\n        var piece = board[i]\r\n        var difference = i - square\r\n        var index = difference + 119\r\n  \r\n        if (ATTACKS[index] & (1 << SHIFTS[piece.type])) {\r\n          if (piece.type === PAWN) {\r\n            if (difference > 0) {\r\n              if (piece.color === WHITE) return true\r\n            } else {\r\n              if (piece.color === BLACK) return true\r\n            }\r\n            continue\r\n          }\r\n  \r\n          /* if the piece is a knight or a king */\r\n          if (piece.type === 'n' || piece.type === 'k') return true\r\n  \r\n          var offset = RAYS[index]\r\n          var j = i + offset\r\n  \r\n          var blocked = false\r\n          while (j !== square) {\r\n            if (board[j] != null) {\r\n              blocked = true\r\n              break\r\n            }\r\n            j += offset\r\n          }\r\n  \r\n          if (!blocked) return true\r\n        }\r\n      }\r\n  \r\n      return false\r\n    }\r\n  \r\n    function king_attacked(color) {\r\n      return attacked(swap_color(color), kings[color])\r\n    }\r\n  \r\n    function in_check() {\r\n      return king_attacked(turn)\r\n    }\r\n  \r\n    function in_checkmate() {\r\n      return in_check() && generate_moves().length === 0\r\n    }\r\n  \r\n    function in_stalemate() {\r\n      return !in_check() && generate_moves().length === 0\r\n    }\r\n  \r\n    function insufficient_material() {\r\n      var pieces = {}\r\n      var bishops = []\r\n      var num_pieces = 0\r\n      var sq_color = 0\r\n  \r\n      for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\r\n        sq_color = (sq_color + 1) % 2\r\n        if (i & 0x88) {\r\n          i += 7\r\n          continue\r\n        }\r\n  \r\n        var piece = board[i]\r\n        if (piece) {\r\n          pieces[piece.type] = piece.type in pieces ? pieces[piece.type] + 1 : 1\r\n          if (piece.type === BISHOP) {\r\n            bishops.push(sq_color)\r\n          }\r\n          num_pieces++\r\n        }\r\n      }\r\n  \r\n      /* k vs. k */\r\n      if (num_pieces === 2) {\r\n        return true\r\n      } else if (\r\n        /* k vs. kn .... or .... k vs. kb */\r\n        num_pieces === 3 &&\r\n        (pieces[BISHOP] === 1 || pieces[KNIGHT] === 1)\r\n      ) {\r\n        return true\r\n      } else if (num_pieces === pieces[BISHOP] + 2) {\r\n        /* kb vs. kb where any number of bishops are all on the same color */\r\n        var sum = 0\r\n        var len = bishops.length\r\n        for (var i = 0; i < len; i++) {\r\n          sum += bishops[i]\r\n        }\r\n        if (sum === 0 || sum === len) {\r\n          return true\r\n        }\r\n      }\r\n  \r\n      return false\r\n    }\r\n  \r\n    function in_threefold_repetition() {\r\n      /* TODO: while this function is fine for casual use, a better\r\n       * implementation would use a Zobrist key (instead of FEN). the\r\n       * Zobrist key would be maintained in the make_move/undo_move functions,\r\n       * avoiding the costly that we do below.\r\n       */\r\n      var moves = []\r\n      var positions = {}\r\n      var repetition = false\r\n  \r\n      while (true) {\r\n        var move = undo_move()\r\n        if (!move) break\r\n        moves.push(move)\r\n      }\r\n  \r\n      while (true) {\r\n        /* remove the last two fields in the FEN string, they're not needed\r\n         * when checking for draw by rep */\r\n        var fen = generate_fen()\r\n          .split(' ')\r\n          .slice(0, 4)\r\n          .join(' ')\r\n  \r\n        /* has the position occurred three or move times */\r\n        positions[fen] = fen in positions ? positions[fen] + 1 : 1\r\n        if (positions[fen] >= 3) {\r\n          repetition = true\r\n        }\r\n  \r\n        if (!moves.length) {\r\n          break\r\n        }\r\n        make_move(moves.pop())\r\n      }\r\n  \r\n      return repetition\r\n    }\r\n  \r\n    function push(move) {\r\n      history.push({\r\n        move: move,\r\n        kings: { b: kings.b, w: kings.w },\r\n        turn: turn,\r\n        castling: { b: castling.b, w: castling.w },\r\n        ep_square: ep_square,\r\n        half_moves: half_moves,\r\n        move_number: move_number\r\n      })\r\n    }\r\n  \r\n    function make_move(move) {\r\n      var us = turn\r\n      var them = swap_color(us)\r\n      push(move)\r\n  \r\n      board[move.to] = board[move.from]\r\n      board[move.from] = null\r\n  \r\n      /* if ep capture, remove the captured pawn */\r\n      if (move.flags & BITS.EP_CAPTURE) {\r\n        if (turn === BLACK) {\r\n          board[move.to - 16] = null\r\n        } else {\r\n          board[move.to + 16] = null\r\n        }\r\n      }\r\n  \r\n      /* if pawn promotion, replace with new piece */\r\n      if (move.flags & BITS.PROMOTION) {\r\n        board[move.to] = { type: move.promotion, color: us }\r\n      }\r\n  \r\n      /* if we moved the king */\r\n      if (board[move.to].type === KING) {\r\n        kings[board[move.to].color] = move.to\r\n  \r\n        /* if we castled, move the rook next to the king */\r\n        if (move.flags & BITS.KSIDE_CASTLE) {\r\n          var castling_to = move.to - 1\r\n          var castling_from = move.to + 1\r\n          board[castling_to] = board[castling_from]\r\n          board[castling_from] = null\r\n        } else if (move.flags & BITS.QSIDE_CASTLE) {\r\n          var castling_to = move.to + 1\r\n          var castling_from = move.to - 2\r\n          board[castling_to] = board[castling_from]\r\n          board[castling_from] = null\r\n        }\r\n  \r\n        /* turn off castling */\r\n        castling[us] = ''\r\n      }\r\n  \r\n      /* turn off castling if we move a rook */\r\n      if (castling[us]) {\r\n        for (var i = 0, len = ROOKS[us].length; i < len; i++) {\r\n          if (\r\n            move.from === ROOKS[us][i].square &&\r\n            castling[us] & ROOKS[us][i].flag\r\n          ) {\r\n            castling[us] ^= ROOKS[us][i].flag\r\n            break\r\n          }\r\n        }\r\n      }\r\n  \r\n      /* turn off castling if we capture a rook */\r\n      if (castling[them]) {\r\n        for (var i = 0, len = ROOKS[them].length; i < len; i++) {\r\n          if (\r\n            move.to === ROOKS[them][i].square &&\r\n            castling[them] & ROOKS[them][i].flag\r\n          ) {\r\n            castling[them] ^= ROOKS[them][i].flag\r\n            break\r\n          }\r\n        }\r\n      }\r\n  \r\n      /* if big pawn move, update the en passant square */\r\n      if (move.flags & BITS.BIG_PAWN) {\r\n        if (turn === 'b') {\r\n          ep_square = move.to - 16\r\n        } else {\r\n          ep_square = move.to + 16\r\n        }\r\n      } else {\r\n        ep_square = EMPTY\r\n      }\r\n  \r\n      /* reset the 50 move counter if a pawn is moved or a piece is captured */\r\n      if (move.piece === PAWN) {\r\n        half_moves = 0\r\n      } else if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\r\n        half_moves = 0\r\n      } else {\r\n        half_moves++\r\n      }\r\n  \r\n      if (turn === BLACK) {\r\n        move_number++\r\n      }\r\n      turn = swap_color(turn)\r\n    }\r\n  \r\n    function undo_move() {\r\n      var old = history.pop()\r\n      if (old == null) {\r\n        return null\r\n      }\r\n  \r\n      var move = old.move\r\n      kings = old.kings\r\n      turn = old.turn\r\n      castling = old.castling\r\n      ep_square = old.ep_square\r\n      half_moves = old.half_moves\r\n      move_number = old.move_number\r\n  \r\n      var us = turn\r\n      var them = swap_color(turn)\r\n  \r\n      board[move.from] = board[move.to]\r\n      board[move.from].type = move.piece // to undo any promotions\r\n      board[move.to] = null\r\n  \r\n      if (move.flags & BITS.CAPTURE) {\r\n        board[move.to] = { type: move.captured, color: them }\r\n      } else if (move.flags & BITS.EP_CAPTURE) {\r\n        var index\r\n        if (us === BLACK) {\r\n          index = move.to - 16\r\n        } else {\r\n          index = move.to + 16\r\n        }\r\n        board[index] = { type: PAWN, color: them }\r\n      }\r\n  \r\n      if (move.flags & (BITS.KSIDE_CASTLE | BITS.QSIDE_CASTLE)) {\r\n        var castling_to, castling_from\r\n        if (move.flags & BITS.KSIDE_CASTLE) {\r\n          castling_to = move.to + 1\r\n          castling_from = move.to - 1\r\n        } else if (move.flags & BITS.QSIDE_CASTLE) {\r\n          castling_to = move.to - 2\r\n          castling_from = move.to + 1\r\n        }\r\n  \r\n        board[castling_to] = board[castling_from]\r\n        board[castling_from] = null\r\n      }\r\n  \r\n      return move\r\n    }\r\n  \r\n    /* this function is used to uniquely identify ambiguous moves */\r\n    function get_disambiguator(move, sloppy) {\r\n      var moves = generate_moves({ legal: !sloppy })\r\n  \r\n      var from = move.from\r\n      var to = move.to\r\n      var piece = move.piece\r\n  \r\n      var ambiguities = 0\r\n      var same_rank = 0\r\n      var same_file = 0\r\n  \r\n      for (var i = 0, len = moves.length; i < len; i++) {\r\n        var ambig_from = moves[i].from\r\n        var ambig_to = moves[i].to\r\n        var ambig_piece = moves[i].piece\r\n  \r\n        /* if a move of the same piece type ends on the same to square, we'll\r\n         * need to add a disambiguator to the algebraic notation\r\n         */\r\n        if (piece === ambig_piece && from !== ambig_from && to === ambig_to) {\r\n          ambiguities++\r\n  \r\n          if (rank(from) === rank(ambig_from)) {\r\n            same_rank++\r\n          }\r\n  \r\n          if (file(from) === file(ambig_from)) {\r\n            same_file++\r\n          }\r\n        }\r\n      }\r\n  \r\n      if (ambiguities > 0) {\r\n        /* if there exists a similar moving piece on the same rank and file as\r\n         * the move in question, use the square as the disambiguator\r\n         */\r\n        if (same_rank > 0 && same_file > 0) {\r\n          return algebraic(from)\r\n        } else if (same_file > 0) {\r\n          /* if the moving piece rests on the same file, use the rank symbol as the\r\n           * disambiguator\r\n           */\r\n          return algebraic(from).charAt(1)\r\n        } else {\r\n          /* else use the file symbol */\r\n          return algebraic(from).charAt(0)\r\n        }\r\n      }\r\n  \r\n      return ''\r\n    }\r\n  \r\n    function ascii() {\r\n      var s = '   +------------------------+\\n'\r\n      for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\r\n        /* display the rank */\r\n        if (file(i) === 0) {\r\n          s += ' ' + '87654321'[rank(i)] + ' |'\r\n        }\r\n  \r\n        /* empty piece */\r\n        if (board[i] == null) {\r\n          s += ' . '\r\n        } else {\r\n          var piece = board[i].type\r\n          var color = board[i].color\r\n          var symbol = color === WHITE ? piece.toUpperCase() : piece.toLowerCase()\r\n          s += ' ' + symbol + ' '\r\n        }\r\n  \r\n        if ((i + 1) & 0x88) {\r\n          s += '|\\n'\r\n          i += 8\r\n        }\r\n      }\r\n      s += '   +------------------------+\\n'\r\n      s += '     a  b  c  d  e  f  g  h\\n'\r\n  \r\n      return s\r\n    }\r\n  \r\n    // convert a move from Standard Algebraic Notation (SAN) to 0x88 coordinates\r\n    function move_from_san(move, sloppy) {\r\n      // strip off any move decorations: e.g Nf3+?!\r\n      var clean_move = stripped_san(move)\r\n  \r\n      // if we're using the sloppy parser run a regex to grab piece, to, and from\r\n      // this should parse invalid SAN like: Pe2-e4, Rc1c4, Qf3xf7\r\n      if (sloppy) {\r\n        var matches = clean_move.match(\r\n          /([pnbrqkPNBRQK])?([a-h][1-8])x?-?([a-h][1-8])([qrbnQRBN])?/\r\n        )\r\n        if (matches) {\r\n          var piece = matches[1]\r\n          var from = matches[2]\r\n          var to = matches[3]\r\n          var promotion = matches[4]\r\n        }\r\n      }\r\n  \r\n      var moves = generate_moves()\r\n      for (var i = 0, len = moves.length; i < len; i++) {\r\n        // try the strict parser first, then the sloppy parser if requested\r\n        // by the user\r\n        if (\r\n          clean_move === stripped_san(move_to_san(moves[i])) ||\r\n          (sloppy && clean_move === stripped_san(move_to_san(moves[i], true)))\r\n        ) {\r\n          return moves[i]\r\n        } else {\r\n          if (\r\n            matches &&\r\n            (!piece || piece.toLowerCase() == moves[i].piece) &&\r\n            SQUARES[from] == moves[i].from &&\r\n            SQUARES[to] == moves[i].to &&\r\n            (!promotion || promotion.toLowerCase() == moves[i].promotion)\r\n          ) {\r\n            return moves[i]\r\n          }\r\n        }\r\n      }\r\n  \r\n      return null\r\n    }\r\n  \r\n    /*****************************************************************************\r\n     * UTILITY FUNCTIONS\r\n     ****************************************************************************/\r\n    function rank(i) {\r\n      return i >> 4\r\n    }\r\n  \r\n    function file(i) {\r\n      return i & 15\r\n    }\r\n  \r\n    function algebraic(i) {\r\n      var f = file(i),\r\n        r = rank(i)\r\n      return 'abcdefgh'.substring(f, f + 1) + '87654321'.substring(r, r + 1)\r\n    }\r\n  \r\n    function swap_color(c) {\r\n      return c === WHITE ? BLACK : WHITE\r\n    }\r\n  \r\n    function is_digit(c) {\r\n      return '0123456789'.indexOf(c) !== -1\r\n    }\r\n  \r\n    /* pretty = external move object */\r\n    function make_pretty(ugly_move) {\r\n      var move = clone(ugly_move)\r\n      move.san = move_to_san(move, false)\r\n      move.to = algebraic(move.to)\r\n      move.from = algebraic(move.from)\r\n  \r\n      var flags = ''\r\n  \r\n      for (var flag in BITS) {\r\n        if (BITS[flag] & move.flags) {\r\n          flags += FLAGS[flag]\r\n        }\r\n      }\r\n      move.flags = flags\r\n  \r\n      return move\r\n    }\r\n  \r\n    function clone(obj) {\r\n      var dupe = obj instanceof Array ? [] : {}\r\n  \r\n      for (var property in obj) {\r\n        if (typeof property === 'object') {\r\n          dupe[property] = clone(obj[property])\r\n        } else {\r\n          dupe[property] = obj[property]\r\n        }\r\n      }\r\n  \r\n      return dupe\r\n    }\r\n  \r\n    function trim(str) {\r\n      return str.replace(/^\\s+|\\s+$/g, '')\r\n    }\r\n  \r\n    /*****************************************************************************\r\n     * DEBUGGING UTILITIES\r\n     ****************************************************************************/\r\n    function perft(depth) {\r\n      var moves = generate_moves({ legal: false })\r\n      var nodes = 0\r\n      var color = turn\r\n  \r\n      for (var i = 0, len = moves.length; i < len; i++) {\r\n        make_move(moves[i])\r\n        if (!king_attacked(color)) {\r\n          if (depth - 1 > 0) {\r\n            var child_nodes = perft(depth - 1)\r\n            nodes += child_nodes\r\n          } else {\r\n            nodes++\r\n          }\r\n        }\r\n        undo_move()\r\n      }\r\n  \r\n      return nodes\r\n    }\r\n  \r\n    return {\r\n      /***************************************************************************\r\n       * PUBLIC CONSTANTS (is there a better way to do this?)\r\n       **************************************************************************/\r\n      WHITE: WHITE,\r\n      BLACK: BLACK,\r\n      PAWN: PAWN,\r\n      KNIGHT: KNIGHT,\r\n      BISHOP: BISHOP,\r\n      ROOK: ROOK,\r\n      QUEEN: QUEEN,\r\n      KING: KING,\r\n      SQUARES: (function() {\r\n        /* from the ECMA-262 spec (section 12.6.4):\r\n         * \"The mechanics of enumerating the properties ... is\r\n         * implementation dependent\"\r\n         * so: for (var sq in SQUARES) { keys.push(sq); } might not be\r\n         * ordered correctly\r\n         */\r\n        var keys = []\r\n        for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\r\n          if (i & 0x88) {\r\n            i += 7\r\n            continue\r\n          }\r\n          keys.push(algebraic(i))\r\n        }\r\n        return keys\r\n      })(),\r\n      FLAGS: FLAGS,\r\n  \r\n      /***************************************************************************\r\n       * PUBLIC API\r\n       **************************************************************************/\r\n      load: function(fen) {\r\n        return load(fen)\r\n      },\r\n  \r\n      reset: function() {\r\n        return reset()\r\n      },\r\n  \r\n      moves: function(options) {\r\n        /* The internal representation of a chess move is in 0x88 format, and\r\n         * not meant to be human-readable.  The code below converts the 0x88\r\n         * square coordinates to algebraic coordinates.  It also prunes an\r\n         * unnecessary move keys resulting from a verbose call.\r\n         */\r\n  \r\n        var ugly_moves = generate_moves(options)\r\n        var moves = []\r\n  \r\n        for (var i = 0, len = ugly_moves.length; i < len; i++) {\r\n          /* does the user want a full move object (most likely not), or just\r\n           * SAN\r\n           */\r\n          if (\r\n            typeof options !== 'undefined' &&\r\n            'verbose' in options &&\r\n            options.verbose\r\n          ) {\r\n            moves.push(make_pretty(ugly_moves[i]))\r\n          } else {\r\n            moves.push(move_to_san(ugly_moves[i], false))\r\n          }\r\n        }\r\n  \r\n        return moves\r\n      },\r\n  \r\n      in_check: function() {\r\n        return in_check()\r\n      },\r\n  \r\n      in_checkmate: function() {\r\n        return in_checkmate()\r\n      },\r\n  \r\n      in_stalemate: function() {\r\n        return in_stalemate()\r\n      },\r\n  \r\n      in_draw: function() {\r\n        return (\r\n          half_moves >= 100 ||\r\n          in_stalemate() ||\r\n          insufficient_material() ||\r\n          in_threefold_repetition()\r\n        )\r\n      },\r\n  \r\n      insufficient_material: function() {\r\n        return insufficient_material()\r\n      },\r\n  \r\n      in_threefold_repetition: function() {\r\n        return in_threefold_repetition()\r\n      },\r\n  \r\n      game_over: function() {\r\n        return (\r\n          half_moves >= 100 ||\r\n          in_checkmate() ||\r\n          in_stalemate() ||\r\n          insufficient_material() ||\r\n          in_threefold_repetition()\r\n        )\r\n      },\r\n  \r\n      validate_fen: function(fen) {\r\n        return validate_fen(fen)\r\n      },\r\n  \r\n      fen: function() {\r\n        return generate_fen()\r\n      },\r\n  \r\n      board: function() {\r\n        var output = [],\r\n          row = []\r\n  \r\n        for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\r\n          if (board[i] == null) {\r\n            row.push(null)\r\n          } else {\r\n            row.push({ type: board[i].type, color: board[i].color })\r\n          }\r\n          if ((i + 1) & 0x88) {\r\n            output.push(row)\r\n            row = []\r\n            i += 8\r\n          }\r\n        }\r\n  \r\n        return output\r\n      },\r\n  \r\n      pgn: function(options) {\r\n        /* using the specification from http://www.chessclub.com/help/PGN-spec\r\n         * example for html usage: .pgn({ max_width: 72, newline_char: \"<br />\" })\r\n         */\r\n        var newline =\r\n          typeof options === 'object' && typeof options.newline_char === 'string'\r\n            ? options.newline_char\r\n            : '\\n'\r\n        var max_width =\r\n          typeof options === 'object' && typeof options.max_width === 'number'\r\n            ? options.max_width\r\n            : 0\r\n        var result = []\r\n        var header_exists = false\r\n  \r\n        /* add the PGN header headerrmation */\r\n        for (var i in header) {\r\n          /* TODO: order of enumerated properties in header object is not\r\n           * guaranteed, see ECMA-262 spec (section 12.6.4)\r\n           */\r\n          result.push('[' + i + ' \"' + header[i] + '\"]' + newline)\r\n          header_exists = true\r\n        }\r\n  \r\n        if (header_exists && history.length) {\r\n          result.push(newline)\r\n        }\r\n  \r\n        var append_comment = function(move_string) {\r\n          var comment = comments[generate_fen()]\r\n          if (typeof comment !== 'undefined') {\r\n            var delimiter = move_string.length > 0 ? ' ' : '';\r\n            move_string = `${move_string}${delimiter}{${comment}}`\r\n          }\r\n          return move_string\r\n        }\r\n  \r\n        /* pop all of history onto reversed_history */\r\n        var reversed_history = []\r\n        while (history.length > 0) {\r\n          reversed_history.push(undo_move())\r\n        }\r\n  \r\n        var moves = []\r\n        var move_string = ''\r\n  \r\n        /* special case of a commented starting position with no moves */\r\n        if (reversed_history.length === 0) {\r\n          moves.push(append_comment(''))\r\n        }\r\n  \r\n        /* build the list of moves.  a move_string looks like: \"3. e3 e6\" */\r\n        while (reversed_history.length > 0) {\r\n          move_string = append_comment(move_string)\r\n          var move = reversed_history.pop()\r\n  \r\n          /* if the position started with black to move, start PGN with 1. ... */\r\n          if (!history.length && move.color === 'b') {\r\n            move_string = move_number + '. ...'\r\n          } else if (move.color === 'w') {\r\n            /* store the previous generated move_string if we have one */\r\n            if (move_string.length) {\r\n              moves.push(move_string)\r\n            }\r\n            move_string = move_number + '.'\r\n          }\r\n  \r\n          move_string = move_string + ' ' + move_to_san(move, false)\r\n          make_move(move)\r\n        }\r\n  \r\n        /* are there any other leftover moves? */\r\n        if (move_string.length) {\r\n          moves.push(append_comment(move_string))\r\n        }\r\n  \r\n        /* is there a result? */\r\n        if (typeof header.Result !== 'undefined') {\r\n          moves.push(header.Result)\r\n        }\r\n  \r\n        /* history should be back to what it was before we started generating PGN,\r\n         * so join together moves\r\n         */\r\n        if (max_width === 0) {\r\n          return result.join('') + moves.join(' ')\r\n        }\r\n  \r\n        var strip = function() {\r\n          if (result.length > 0 && result[result.length - 1] === ' ') {\r\n            result.pop();\r\n            return true;\r\n          }\r\n          return false;\r\n        };\r\n  \r\n        /* NB: this does not preserve comment whitespace. */\r\n        var wrap_comment = function(width, move) {\r\n          for (var token of move.split(' ')) {\r\n            if (!token) {\r\n              continue;\r\n            }\r\n            if (width + token.length > max_width) {\r\n              while (strip()) {\r\n                width--;\r\n              }\r\n              result.push(newline);\r\n              width = 0;\r\n            }\r\n            result.push(token);\r\n            width += token.length;\r\n            result.push(' ');\r\n            width++;\r\n          }\r\n          if (strip()) {\r\n            width--;\r\n          }\r\n          return width;\r\n        };\r\n  \r\n        /* wrap the PGN output at max_width */\r\n        var current_width = 0\r\n        for (var i = 0; i < moves.length; i++) {\r\n          if (current_width + moves[i].length > max_width) {\r\n            if (moves[i].includes('{')) {\r\n              current_width = wrap_comment(current_width, moves[i]);\r\n              continue;\r\n            }\r\n          }\r\n          /* if the current move will push past max_width */\r\n          if (current_width + moves[i].length > max_width && i !== 0) {\r\n            /* don't end the line with whitespace */\r\n            if (result[result.length - 1] === ' ') {\r\n              result.pop()\r\n            }\r\n  \r\n            result.push(newline)\r\n            current_width = 0\r\n          } else if (i !== 0) {\r\n            result.push(' ')\r\n            current_width++\r\n          }\r\n          result.push(moves[i])\r\n          current_width += moves[i].length\r\n        }\r\n  \r\n        return result.join('')\r\n      },\r\n  \r\n      load_pgn: function(pgn, options) {\r\n        // allow the user to specify the sloppy move parser to work around over\r\n        // disambiguation bugs in Fritz and Chessbase\r\n        var sloppy =\r\n          typeof options !== 'undefined' && 'sloppy' in options\r\n            ? options.sloppy\r\n            : false\r\n  \r\n        function mask(str) {\r\n          return str.replace(/\\\\/g, '\\\\')\r\n        }\r\n  \r\n        function has_keys(object) {\r\n          for (var key in object) {\r\n            return true\r\n          }\r\n          return false\r\n        }\r\n  \r\n        function parse_pgn_header(header, options) {\r\n          var newline_char =\r\n            typeof options === 'object' &&\r\n            typeof options.newline_char === 'string'\r\n              ? options.newline_char\r\n              : '\\r?\\n'\r\n          var header_obj = {}\r\n          var headers = header.split(new RegExp(mask(newline_char)))\r\n          var key = ''\r\n          var value = ''\r\n  \r\n          for (var i = 0; i < headers.length; i++) {\r\n            key = headers[i].replace(/^\\[([A-Z][A-Za-z]*)\\s.*\\]$/, '$1')\r\n            value = headers[i].replace(/^\\[[A-Za-z]+\\s\"(.*)\"\\ *\\]$/, '$1')\r\n            if (trim(key).length > 0) {\r\n              header_obj[key] = value\r\n            }\r\n          }\r\n  \r\n          return header_obj\r\n        }\r\n  \r\n        var newline_char =\r\n          typeof options === 'object' && typeof options.newline_char === 'string'\r\n            ? options.newline_char\r\n            : '\\r?\\n'\r\n  \r\n        // RegExp to split header. Takes advantage of the fact that header and movetext\r\n        // will always have a blank line between them (ie, two newline_char's).\r\n        // With default newline_char, will equal: /^(\\[((?:\\r?\\n)|.)*\\])(?:\\r?\\n){2}/\r\n        var header_regex = new RegExp(\r\n          '^(\\\\[((?:' +\r\n            mask(newline_char) +\r\n            ')|.)*\\\\])' +\r\n            '(?:' +\r\n            mask(newline_char) +\r\n            '){2}'\r\n        )\r\n  \r\n        // If no header given, begin with moves.\r\n        var header_string = header_regex.test(pgn)\r\n          ? header_regex.exec(pgn)[1]\r\n          : ''\r\n  \r\n        // Put the board in the starting position\r\n        reset()\r\n  \r\n        /* parse PGN header */\r\n        var headers = parse_pgn_header(header_string, options)\r\n        for (var key in headers) {\r\n          set_header([key, headers[key]])\r\n        }\r\n  \r\n        /* load the starting position indicated by [Setup '1'] and\r\n         * [FEN position] */\r\n        if (headers['SetUp'] === '1') {\r\n          if (!('FEN' in headers && load(headers['FEN'], true))) {\r\n            // second argument to load: don't clear the headers\r\n            return false\r\n          }\r\n        }\r\n  \r\n        /* NB: the regexes below that delete move numbers, recursive\r\n         * annotations, and numeric annotation glyphs may also match\r\n         * text in comments. To prevent this, we transform comments\r\n         * by hex-encoding them in place and decoding them again after\r\n         * the other tokens have been deleted.\r\n         *\r\n         * While the spec states that PGN files should be ASCII encoded,\r\n         * we use {en,de}codeURIComponent here to support arbitrary UTF8\r\n         * as a convenience for modern users */\r\n  \r\n        var to_hex = function(string) {\r\n          return Array\r\n            .from(string)\r\n            .map(function(c) {\r\n              /* encodeURI doesn't transform most ASCII characters,\r\n               * so we handle these ourselves */\r\n              return c.charCodeAt(0) < 128\r\n                ? c.charCodeAt(0).toString(16)\r\n                : encodeURIComponent(c).replace(/\\%/g, '').toLowerCase()\r\n            })\r\n            .join('')\r\n        }\r\n  \r\n        var from_hex = function(string) {\r\n          return string.length == 0\r\n            ? ''\r\n            : decodeURIComponent('%' + string.match(/.{1,2}/g).join('%'))\r\n        }\r\n  \r\n        var encode_comment = function(string) {\r\n          string = string.replace(new RegExp(mask(newline_char), 'g'), ' ')\r\n          return `{${to_hex(string.slice(1, string.length - 1))}}`\r\n        }\r\n  \r\n        var decode_comment = function(string) {\r\n          if (string.startsWith('{') && string.endsWith('}')) {\r\n            return from_hex(string.slice(1, string.length - 1))\r\n          }\r\n        }\r\n  \r\n        /* delete header to get the moves */\r\n        var ms = pgn\r\n          .replace(header_string, '')\r\n          .replace(\r\n            /* encode comments so they don't get deleted below */\r\n            new RegExp(`(\\{[^}]*\\})+?|;([^${mask(newline_char)}]*)`, 'g'),\r\n            function(match, bracket, semicolon) {\r\n              return bracket !== undefined\r\n                ? encode_comment(bracket)\r\n                : ' ' + encode_comment(`{${semicolon.slice(1)}}`)\r\n            }\r\n          )\r\n          .replace(new RegExp(mask(newline_char), 'g'), ' ')\r\n  \r\n        /* delete recursive annotation variations */\r\n        var rav_regex = /(\\([^\\(\\)]+\\))+?/g\r\n        while (rav_regex.test(ms)) {\r\n          ms = ms.replace(rav_regex, '')\r\n        }\r\n  \r\n        /* delete move numbers */\r\n        ms = ms.replace(/\\d+\\.(\\.\\.)?/g, '')\r\n  \r\n        /* delete ... indicating black to move */\r\n        ms = ms.replace(/\\.\\.\\./g, '')\r\n  \r\n        /* delete numeric annotation glyphs */\r\n        ms = ms.replace(/\\$\\d+/g, '')\r\n  \r\n        /* trim and get array of moves */\r\n        var moves = trim(ms).split(new RegExp(/\\s+/))\r\n  \r\n        /* delete empty entries */\r\n        moves = moves\r\n          .join(',')\r\n          .replace(/,,+/g, ',')\r\n          .split(',')\r\n        var move = ''\r\n  \r\n        for (var half_move = 0; half_move < moves.length - 1; half_move++) {\r\n          var comment = decode_comment(moves[half_move])\r\n          if (comment !== undefined) {\r\n            comments[generate_fen()] = comment\r\n            continue\r\n          }\r\n          move = move_from_san(moves[half_move], sloppy)\r\n  \r\n          /* move not possible! (don't clear the board to examine to show the\r\n           * latest valid position)\r\n           */\r\n          if (move == null) {\r\n            return false\r\n          } else {\r\n            make_move(move)\r\n          }\r\n        }\r\n  \r\n        comment = decode_comment(moves[moves.length - 1])\r\n        if (comment !== undefined) {\r\n          comments[generate_fen()] = comment\r\n          moves.pop()\r\n        }\r\n  \r\n        /* examine last move */\r\n        move = moves[moves.length - 1]\r\n        if (POSSIBLE_RESULTS.indexOf(move) > -1) {\r\n          if (has_keys(header) && typeof header.Result === 'undefined') {\r\n            set_header(['Result', move])\r\n          }\r\n        } else {\r\n          move = move_from_san(move, sloppy)\r\n          if (move == null) {\r\n            return false\r\n          } else {\r\n            make_move(move)\r\n          }\r\n        }\r\n        return true\r\n      },\r\n  \r\n      header: function() {\r\n        return set_header(arguments)\r\n      },\r\n  \r\n      ascii: function() {\r\n        return ascii()\r\n      },\r\n  \r\n      turn: function() {\r\n        return turn\r\n      },\r\n\r\n      setTurn: function(t) {\r\n          turn = t;\r\n      },\r\n  \r\n      move: function(move, options) {\r\n        /* The move function can be called with in the following parameters:\r\n         *\r\n         * .move('Nxb7')      <- where 'move' is a case-sensitive SAN string\r\n         *\r\n         * .move({ from: 'h7', <- where the 'move' is a move object (additional\r\n         *         to :'h8',      fields are ignored)\r\n         *         promotion: 'q',\r\n         *      })\r\n         */\r\n  \r\n        // allow the user to specify the sloppy move parser to work around over\r\n        // disambiguation bugs in Fritz and Chessbase\r\n        var sloppy =\r\n          typeof options !== 'undefined' && 'sloppy' in options\r\n            ? options.sloppy\r\n            : false\r\n  \r\n        var move_obj = null\r\n  \r\n        if (typeof move === 'string') {\r\n          move_obj = move_from_san(move, sloppy)\r\n        } else if (typeof move === 'object') {\r\n          var moves = generate_moves()\r\n  \r\n          /* convert the pretty move object to an ugly move object */\r\n          for (var i = 0, len = moves.length; i < len; i++) {\r\n            if (\r\n              move.from === algebraic(moves[i].from) &&\r\n              move.to === algebraic(moves[i].to) &&\r\n              (!('promotion' in moves[i]) ||\r\n                move.promotion === moves[i].promotion)\r\n            ) {\r\n              move_obj = moves[i]\r\n              break\r\n            }\r\n          }\r\n        }\r\n  \r\n        /* failed to find move */\r\n        if (!move_obj) {\r\n          return null\r\n        }\r\n  \r\n        /* need to make a copy of move because we can't generate SAN after the\r\n         * move is made\r\n         */\r\n        var pretty_move = make_pretty(move_obj)\r\n  \r\n        make_move(move_obj)\r\n  \r\n        return pretty_move\r\n      },\r\n  \r\n      undo: function() {\r\n        var move = undo_move()\r\n        return move ? make_pretty(move) : null\r\n      },\r\n  \r\n      clear: function() {\r\n        return clear()\r\n      },\r\n  \r\n      put: function(piece, square) {\r\n        return put(piece, square)\r\n      },\r\n  \r\n      get: function(square) {\r\n        return get(square)\r\n      },\r\n  \r\n      remove: function(square) {\r\n        return remove(square)\r\n      },\r\n  \r\n      perft: function(depth) {\r\n        return perft(depth)\r\n      },\r\n  \r\n      square_color: function(square) {\r\n        if (square in SQUARES) {\r\n          var sq_0x88 = SQUARES[square]\r\n          return (rank(sq_0x88) + file(sq_0x88)) % 2 === 0 ? 'light' : 'dark'\r\n        }\r\n  \r\n        return null\r\n      },\r\n  \r\n      history: function(options) {\r\n        var reversed_history = []\r\n        var move_history = []\r\n        var verbose =\r\n          typeof options !== 'undefined' &&\r\n          'verbose' in options &&\r\n          options.verbose\r\n  \r\n        while (history.length > 0) {\r\n          reversed_history.push(undo_move())\r\n        }\r\n  \r\n        while (reversed_history.length > 0) {\r\n          var move = reversed_history.pop()\r\n          if (verbose) {\r\n            move_history.push(make_pretty(move))\r\n          } else {\r\n            move_history.push(move_to_san(move))\r\n          }\r\n          make_move(move)\r\n        }\r\n  \r\n        return move_history\r\n      },\r\n  \r\n      get_comment: function() {\r\n        return comments[generate_fen()];\r\n      },\r\n  \r\n      set_comment: function(comment) {\r\n        comments[generate_fen()] = comment.replace('{', '[').replace('}', ']');\r\n      },\r\n  \r\n      delete_comment: function() {\r\n        var comment = comments[generate_fen()];\r\n        delete comments[generate_fen()];\r\n        return comment;\r\n      },\r\n  \r\n      get_comments: function() {\r\n        prune_comments();\r\n        return Object.keys(comments).map(function(fen) {\r\n          return {fen: fen, comment: comments[fen]};\r\n        });\r\n      },\r\n  \r\n      delete_comments: function() {\r\n        prune_comments();\r\n        return Object.keys(comments)\r\n          .map(function(fen) {\r\n            var comment = comments[fen];\r\n            delete comments[fen];\r\n            return {fen: fen, comment: comment};\r\n          });\r\n      }\r\n    }\r\n  }\r\n  \r\n  /* export Chess object if using node or any other CommonJS compatible\r\n   * environment */\r\n  if (typeof exports !== 'undefined') exports.Chess = Chess\r\n  /* export Chess object for any RequireJS compatible environment */\r\n  if (typeof define !== 'undefined')\r\n    define(function() {\r\n      return Chess\r\n    })","const DEPTH = 3;\r\nconst MIN = -200000;\r\nconst MAX = 200000;\r\nclass Turochamp {\r\n  constructor(game) {\r\n    this.game = game;\r\n  }\r\n  getEvaluation() {\r\n    const t = this.game.turn();\r\n    this.game.setTurn(\"w\");\r\n    const val = this._getPositionalValue() + 100 * this._getMaterialValue();\r\n    this.game.setTurn(t);\r\n    return val;\r\n  }\r\n\r\n  findNextMove() {\r\n    if (this.game.turn() != \"w\") return null;\r\n    let maxValue = -20000;\r\n    let maxValueMove = null;\r\n\r\n    const moves = this.game.moves({ verbose: true });\r\n\r\n    for (const move of moves) {\r\n      const val = this._alphaBetaSearch(move, 1, MIN, MAX, false) * 100;\r\n      this.game.move(move);\r\n      val += this._getPositionEvaluation();\r\n      val += this._countKingSafetyScore(move);\r\n      val += this._isCheckMateThreat() ? 1 : 0;\r\n      this.game.undo();\r\n\r\n      if (maxValue <= val) {\r\n        maxValue = val;\r\n        maxValueMove = move;\r\n      }\r\n    }\r\n    return maxValueMove;\r\n  }\r\n\r\n  _alphaBetaSearch(move, currDepth, alpha, beta, isMax) {\r\n    if (currDepth > DEPTH) {\r\n      this.game.move(move);\r\n      const mval = this._getMaterialValueSub();\r\n      this.game.undo();\r\n      return mval;\r\n    }\r\n\r\n    let considerableMoves = 0;\r\n    this.game.move(move);\r\n\r\n    if (isMax) {\r\n      // Max\r\n      let best = MIN;\r\n      for (const m of this.game.moves({ verbose: true })) {\r\n        if (m.flags === \"c\" || m.flags === \"e\") {\r\n          considerableMoves++;\r\n          const val = this._alphaBetaSearch(\r\n            m,\r\n            currDepth + 1,\r\n            alpha,\r\n            beta,\r\n            false\r\n          );\r\n          best = Math.max(best, val);\r\n          alpha = Math.max(alpha, best);\r\n\r\n          if (beta <= alpha) break;\r\n        } else {\r\n          const val = this._getMaterialValueSub();\r\n          best = Math.max(best, val);\r\n          beta = Math.max(beta, best);\r\n          if (beta <= alpha) break;\r\n        }\r\n      }\r\n\r\n      if (considerableMoves == 0) {\r\n        // No considerable moves, thus dead position\r\n        const matval = this._getMaterialValueSub();\r\n        this.game.undo();\r\n        return matval;\r\n      }\r\n      this.game.undo();\r\n      return best;\r\n    } else {\r\n      // Min\r\n      let best = MAX;\r\n      for (let m of this.game.moves({ verbose: true })) {\r\n        if (m.flags === \"c\" || m.flags === \"e\") {\r\n          considerableMoves++;\r\n          const val = this._alphaBetaSearch(\r\n            m,\r\n            currDepth + 1,\r\n            alpha,\r\n            beta,\r\n            true\r\n          );\r\n          best = Math.min(best, val);\r\n          beta = Math.min(beta, best);\r\n          if (beta <= alpha) break;\r\n        } else {\r\n          const val = this._getMaterialValueSub();\r\n          best = Math.min(best, val);\r\n          beta = Math.min(beta, best);\r\n          if (beta <= alpha) break;\r\n        }\r\n      }\r\n      if (considerableMoves == 0) {\r\n        // No considerable moves, thus dead position\r\n        const matval = this._getMaterialValueSub();\r\n        this.game.undo();\r\n        return matval;\r\n      }\r\n      this.game.undo();\r\n\r\n      return best;\r\n    }\r\n  }\r\n  _getPositionEvaluation() {\r\n    const t = this.game.turn();\r\n    this.game.setTurn(\"w\");\r\n    const val = this._getPositionalValue();\r\n    this.game.setTurn(t);\r\n    return val;\r\n  }\r\n  _getPositionalValue() {\r\n    let value = 0;\r\n    // (i)\r\n    let criteria1 =\r\n      this._countRootNumberOfMoves(\"q\") +\r\n      this._countRootNumberOfMoves(\"b\") +\r\n      this._countRootNumberOfMoves(\"r\") +\r\n      this._countRootNumberOfMoves(\"n\");\r\n    value += criteria1;\r\n    // (ii)\r\n    let criteria2 =\r\n      this._countDefendersOfPiece(\"n\") +\r\n      this._countDefendersOfPiece(\"b\") +\r\n      this._countDefendersOfPiece(\"r\");\r\n    value += criteria2;\r\n    // (iii)\r\n    let criteria3 = this._countKingMovesNotCastle();\r\n    value += criteria3;\r\n    // (iv)\r\n    let criteria4 = this._countKingExposedScore();\r\n    value -= criteria4;\r\n    // (vi) ,(vii)\r\n    let criteria6 = this._countPawnScore();\r\n    value += criteria6;\r\n    //(ix)\r\n    value += this._isBlackInCheck() ? 0.5 : 0;\r\n\r\n    return value;\r\n  }\r\n  _countRootNumberOfMoves(piece) {\r\n    let value = 0;\r\n    const moves = this.game.moves({ verbose: true });\r\n    for (const move of moves) {\r\n      if (move.color == \"w\" && move.piece.toLowerCase() == piece) {\r\n        if (move.flags == \"c\") value += 2;\r\n        else value += 1;\r\n      }\r\n    }\r\n    value = Math.sqrt(value);\r\n    return value;\r\n  }\r\n  _countPawnScore() {\r\n    let value = 0;\r\n    let rank = 8;\r\n    for (let row of this.game.board()) {\r\n      let file = \"a\";\r\n      for (let sq of row) {\r\n        if (sq == null) {\r\n          file = this._nextChar(file);\r\n          continue;\r\n        }\r\n        if (sq.type === \"p\" && sq.color === \"w\") {\r\n          value += (rank - 2) * 0.2;\r\n          const d = this._countSquareDefenders(file + rank, false);\r\n          if (rank > 2 && d >= 1) value += 0.3;\r\n        }\r\n        file = this._nextChar(file);\r\n      }\r\n      rank--;\r\n    }\r\n    return value;\r\n  }\r\n  _countKingMovesNotCastle() {\r\n    let value = 0;\r\n    for (const move of this.game.moves({ verbose: true })) {\r\n      if (\r\n        move.piece.toLowerCase() === \"k\" &&\r\n        move.flags != \"q\" &&\r\n        move.flags != \"k\"\r\n      ) {\r\n        value += 1;\r\n        if (move.flags == \"c\") value += 1;\r\n      }\r\n    }\r\n    return Math.sqrt(value);\r\n  }\r\n  _countKingExposedScore() {\r\n    let value = 0;\r\n    let sq = this._squaresOfPiece(\"k\")[0];\r\n    let removedKing = this.game.remove(sq);\r\n    this.game.put(\r\n      {\r\n        type: \"q\",\r\n        color: \"w\",\r\n      },\r\n      sq\r\n    );\r\n\r\n    try {\r\n      for (let move of this.game.moves({\r\n        verbose: true,\r\n        legal: false,\r\n        square: sq,\r\n      })) {\r\n        if (move.piece === \"q\") {\r\n          value += 1;\r\n          if (move.flags === \"c\") value += 1;\r\n        }\r\n      }\r\n      this.game.put(removedKing, sq);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n    return Math.sqrt(value);\r\n  }\r\n  _countKingSafetyScore(movePlayed) {\r\n    let value = 0;\r\n    if (this._isCastlingPossible()) value += 1;\r\n\r\n    for (const move of this.game.moves({ verbose: true })) {\r\n      if (move.flags === \"k\" || move.flags === \"q\") {\r\n        value += 1;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (movePlayed.flags === \"k\" || movePlayed.flags === \"q\") value += 1; // TODO : Can't do it here have to do it at root\r\n\r\n    return value;\r\n  }\r\n  _isCheckMateThreat() {\r\n    for(const move of this.game.moves({verbose: true})){\r\n        this.game.move(move);\r\n        if(this.game.in_checkmate()){\r\n            return true;\r\n        }\r\n        this.game.undo();\r\n    }\r\n    return false;\r\n  }\r\n  _isBlackInCheck() {\r\n    this.game.setTurn(\"b\");\r\n    const isCheck = this.game.in_check();\r\n    this.game.setTurn(\"w\");\r\n    return isCheck;\r\n  }\r\n  _isCastlingPossible() {\r\n    const fen = this.game.fen();\r\n    const fenParts = fen.split(\" \");\r\n    let castling = fenParts[2];\r\n    for (let ca of castling) {\r\n      if (ca == \"K\" || ca == \"Q\") return true;\r\n    }\r\n    return false;\r\n  }\r\n  _countDefendersOfPiece(piece) {\r\n    let value = 0;\r\n    let squares = this._squaresOfPiece(piece);\r\n    for (let sq of squares) {\r\n      let defenders = this._countSquareDefenders(sq);\r\n      if (defenders >= 1) value += 1;\r\n      if (defenders >= 2) value += 0.5;\r\n    }\r\n    return value;\r\n  }\r\n  _countSquareDefenders(square, countPawn = true) {\r\n    // remove the piece and put an enemy queen here\r\n    let defenders = 0;\r\n    const removedPiece = this.game.remove(square);\r\n    this.game.put(\r\n      {\r\n        type: \"q\",\r\n        color: \"b\",\r\n      },\r\n      square\r\n    );\r\n    try {\r\n      for (let move of this.game.moves({ verbose: true })) {\r\n        if (move.to === square && (move.flags === \"c\" || move.flags === \"e\")) {\r\n          if (move.piece.toLowerCase() === \"p\" && !countPawn) continue;\r\n          defenders++;\r\n        }\r\n      }\r\n      this.game.remove(square);\r\n      this.game.put(removedPiece, square);\r\n      return defenders;\r\n    } catch (e) {\r\n      console.log(\"error \", e);\r\n      return 0;\r\n    }\r\n  }\r\n  _squaresOfPiece(pieceType) {\r\n    return this.game.SQUARES.filter((square) => {\r\n      const r = this.game.get(square);\r\n      return r === null\r\n        ? false\r\n        : r.color == \"w\" && r.type.toLowerCase() === pieceType;\r\n    });\r\n  }\r\n  _getMaterialValue() {\r\n    const B = this._getMaterialValueForColor(\"b\");\r\n    const W = this._getMaterialValueForColor(\"w\");\r\n    return W / B;\r\n  }\r\n  _getMaterialValueSub() {\r\n    const B = this._getMaterialValueForColor(\"b\");\r\n    const W = this._getMaterialValueForColor(\"w\");\r\n    return W - B;\r\n  }\r\n  _getMaterialValueForColor(color) {\r\n    let value = 0;\r\n    for (let row of this.game.board()) {\r\n      for (let sq of row) {\r\n        if (sq === null) continue;\r\n        if (sq.color === color) {\r\n          switch (sq.type) {\r\n            case \"p\":\r\n              value += 1;\r\n              break;\r\n            case \"r\":\r\n              value += 5;\r\n              break;\r\n            case \"b\":\r\n              value += 3.5;\r\n              break;\r\n            case \"q\":\r\n              value += 10;\r\n              break;\r\n            case \"n\":\r\n              value += 3;\r\n              break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (this.game.in_checkmate()) {\r\n      value += 100;\r\n    }\r\n    return value;\r\n  }\r\n  _nextChar(c) {\r\n    return String.fromCharCode(c.charCodeAt(0) + 1);\r\n  }\r\n}\r\n\r\nexport default Turochamp;\r\n","import { Chess } from \"./chess\";\r\nimport Turochamp from './turochamp/turochamp';\r\n\r\nonmessage = (e) =>{\r\n    const fen = e.data;\r\n    const game = new Chess();\r\n    game.load(fen);\r\n    const turochamp = new Turochamp(game);\r\n    postMessage(JSON.stringify(turochamp.findNextMove()));\r\n}"]}